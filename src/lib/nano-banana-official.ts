// GENERADOR OFICIAL CON GEMINI 2.5 FLASH IMAGE PREVIEW (NANO BANANA)
// ESTE ES EL MODELO CORRECTO PARA GENERACI√ìN DE IM√ÅGENES

import { GoogleGenerativeAI } from '@google/generative-ai';

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// MODELO OFICIAL DE GENERACI√ìN DE IM√ÅGENES
const IMAGE_MODEL = 'gemini-2.5-flash-image-preview';

export async function generateImageWithNanoBanana(
  sketchBase64: string,
  prompt: string = '',
  styles: string[] = []
): Promise<{ success: boolean; imageBase64?: string; error?: string }> {
  
  console.log('üçå === NANO BANANA - GENERACI√ìN DE IM√ÅGENES ===');
  console.log('üìç Usando modelo:', IMAGE_MODEL);
  
  if (!API_KEY) {
    return { success: false, error: 'API Key no configurada' };
  }
  
  try {
    // Inicializar Gemini con el modelo correcto
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ 
      model: IMAGE_MODEL // MODELO DE GENERACI√ìN DE IM√ÅGENES
    });
    
    // Limpiar base64
    const cleanBase64 = sketchBase64.includes(',') 
      ? sketchBase64.split(',')[1] 
      : sketchBase64;
    
    // Construir prompt seg√∫n la documentaci√≥n oficial
    let fullPrompt = prompt || 'Transform this sketch into a detailed, photorealistic image';
    
    // Agregar estilos si los hay
    if (styles && styles.length > 0) {
      const styleMap: Record<string, string> = {
        'realistic': 'photorealistic with natural lighting',
        'anime': 'modern anime style with vibrant colors',
        'oil_painting': 'oil painting style with rich textures',
        'watercolor': 'watercolor painting style with soft edges',
        'sketch': 'detailed pencil sketch style',
        'digital_art': 'digital art with vivid colors'
      };
      
      const styleDescriptions = styles.map(s => styleMap[s] || s).join(', ');
      fullPrompt += `, rendered in ${styleDescriptions}`;
    }
    
    // Agregar instrucciones espec√≠ficas para mejorar la generaci√≥n
    fullPrompt += `. Analyze the sketch carefully and:
    - Maintain the composition and layout from the original sketch
    - Add realistic details, textures, and lighting
    - Use professional photography quality
    - Make it visually stunning and detailed
    - Fill the entire frame without borders or letterboxing`;
    
    console.log('üìù Prompt:', fullPrompt);
    console.log('üìä Sketch size:', cleanBase64.length);
    
    // ENVIAR AL MODELO DE GENERACI√ìN DE IM√ÅGENES
    const result = await model.generateContent([
      fullPrompt,  // Primero el texto
      {
        inlineData: {
          data: cleanBase64,  // Base64 limpio
          mimeType: 'image/png'
        }
      }
    ]);
    
    console.log('üì• Respuesta recibida del modelo');
    
    const response = await result.response;
    
    // BUSCAR LA IMAGEN GENERADA EN LA RESPUESTA
    if (response.candidates && response.candidates[0]) {
      const candidate = response.candidates[0];
      console.log('‚úÖ Candidato encontrado');
      
      if (candidate.content && candidate.content.parts) {
        console.log(`üì¶ Partes en la respuesta: ${candidate.content.parts.length}`);
        
        // Buscar la imagen generada
        for (const part of candidate.content.parts) {
          // LA IMAGEN GENERADA VIENE COMO inlineData
          if (part.inlineData && part.inlineData.data) {
            console.log('üéâ ¬°IMAGEN GENERADA ENCONTRADA!');
            console.log('üìä Tipo MIME:', part.inlineData.mimeType);
            console.log('üìè Tama√±o de datos:', part.inlineData.data.length);
            
            // DEVOLVER LA IMAGEN GENERADA
            return {
              success: true,
              imageBase64: part.inlineData.data
            };
          }
          
          // Si hay texto, mostrarlo (puede ser explicaci√≥n del modelo)
          if (part.text) {
            console.log('üìù Texto del modelo:', part.text.substring(0, 200));
          }
        }
      }
    }
    
    // Si no se gener√≥ imagen
    console.error('‚ö†Ô∏è El modelo no devolvi√≥ una imagen generada');
    console.log('üí° Posibles razones:');
    console.log('1. El modelo gemini-2.5-flash-image-preview no est√° disponible en tu regi√≥n');
    console.log('2. La API key no tiene permisos para generar im√°genes');
    console.log('3. El contenido fue bloqueado por filtros de seguridad');
    
    return {
      success: false,
      error: 'El modelo no gener√≥ una imagen. Verifica que gemini-2.5-flash-image-preview est√© disponible.'
    };
    
  } catch (error: any) {
    console.error('‚ùå Error llamando a Nano Banana:', error);
    
    // Log detallado del error
    if (error.message) {
      console.error('üìù Mensaje:', error.message);
    }
    if (error.response) {
      console.error('üì° Response:', error.response);
    }
    if (error.status) {
      console.error('üìä Status:', error.status);
    }
    
    return {
      success: false,
      error: error.message || 'Error desconocido al generar imagen'
    };
  }
}

// Funci√≥n para edici√≥n de im√°genes (imagen + texto ‚Üí imagen)
export async function editImageWithNanoBanana(
  originalImageBase64: string,
  editInstructions: string,
  styles: string[] = []
): Promise<{ success: boolean; imageBase64?: string; error?: string }> {
  
  console.log('üé® === NANO BANANA - EDICI√ìN DE IM√ÅGENES ===');
  
  if (!API_KEY) {
    return { success: false, error: 'API Key no configurada' };
  }
  
  try {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ 
      model: IMAGE_MODEL
    });
    
    // Limpiar base64
    const cleanBase64 = originalImageBase64.includes(',') 
      ? originalImageBase64.split(',')[1] 
      : originalImageBase64;
    
    // Construir prompt de edici√≥n
    let editPrompt = editInstructions;
    
    // Agregar estilos si los hay
    if (styles && styles.length > 0) {
      editPrompt += `. Style: ${styles.join(', ')}`;
    }
    
    // Agregar instrucciones para preservar el resto
    editPrompt += `. Important: Preserve everything else in the image except for the specific changes requested. Maintain the original style, lighting, and perspective.`;
    
    console.log('üìù Edit prompt:', editPrompt);
    
    // Enviar imagen original + instrucciones de edici√≥n
    const result = await model.generateContent([
      editPrompt,
      {
        inlineData: {
          data: cleanBase64,
          mimeType: 'image/png'
        }
      }
    ]);
    
    const response = await result.response;
    
    // Extraer imagen editada de la respuesta
    if (response.candidates && response.candidates[0]) {
      const candidate = response.candidates[0];
      
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.data) {
            console.log('‚úÖ Imagen editada generada');
            return {
              success: true,
              imageBase64: part.inlineData.data
            };
          }
        }
      }
    }
    
    return {
      success: false,
      error: 'No se pudo editar la imagen'
    };
    
  } catch (error: any) {
    console.error('‚ùå Error en edici√≥n:', error);
    return {
      success: false,
      error: error.message || 'Error al editar imagen'
    };
  }
}

// Funci√≥n para composici√≥n (m√∫ltiples im√°genes ‚Üí una)
export async function composeImagesWithNanoBanana(
  images: string[],
  compositionInstructions: string
): Promise<{ success: boolean; imageBase64?: string; error?: string }> {
  
  console.log('üé≠ === NANO BANANA - COMPOSICI√ìN DE IM√ÅGENES ===');
  
  if (!API_KEY) {
    return { success: false, error: 'API Key no configurada' };
  }
  
  if (images.length < 2) {
    return { success: false, error: 'Se necesitan al menos 2 im√°genes para componer' };
  }
  
  if (images.length > 3) {
    console.warn('‚ö†Ô∏è El modelo funciona mejor con 3 im√°genes o menos');
  }
  
  try {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ 
      model: IMAGE_MODEL
    });
    
    // Construir el contenido con texto + m√∫ltiples im√°genes
    const contents: any[] = [compositionInstructions];
    
    // Agregar cada imagen
    for (let i = 0; i < images.length; i++) {
      const cleanBase64 = images[i].includes(',') 
        ? images[i].split(',')[1] 
        : images[i];
        
      contents.push({
        inlineData: {
          data: cleanBase64,
          mimeType: 'image/png'
        }
      });
    }
    
    console.log(`üì§ Enviando ${images.length} im√°genes para composici√≥n`);
    
    const result = await model.generateContent(contents);
    const response = await result.response;
    
    // Extraer imagen compuesta
    if (response.candidates && response.candidates[0]) {
      const candidate = response.candidates[0];
      
      if (candidate.content && candidate.content.parts) {
        for (const part of candidate.content.parts) {
          if (part.inlineData && part.inlineData.data) {
            console.log('‚úÖ Imagen compuesta generada');
            return {
              success: true,
              imageBase64: part.inlineData.data
            };
          }
        }
      }
    }
    
    return {
      success: false,
      error: 'No se pudo componer las im√°genes'
    };
    
  } catch (error: any) {
    console.error('‚ùå Error en composici√≥n:', error);
    return {
      success: false,
      error: error.message || 'Error al componer im√°genes'
    };
  }
}